buildscript {
    ext {
        springBootVersion = "2.0.6.RELEASE"
        spockVersion = "1.2-groovy-2.5"
        groovyVersion = "2.5.3"
        lombokVersion = "1.18.2"
        dockerComposePluginVersion = "0.6.6"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = 8
    targetCompatibility = 8
    [compileJava, compileTestJava, compileGroovy, compileTestGroovy]*.options*.encoding = "UTF-8"

    sourceSets {
        test.resources {
            srcDirs "src/main/resources"
            srcDirs "src/test/resources"
        }
    }

    repositories {
        mavenCentral()
        jcenter()

        maven { url "http://jasperreports.sourceforge.net/maven2/" }
        maven { url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/" }
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true

            inheritOutputDirs = false
            outputDir = compileJava.destinationDir
            testOutputDir = compileTestJava.destinationDir
        }
    }

    eclipse {
        classpath {
            containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
            containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11"
        }
    }

    bootRun {
        sourceResources sourceSets.main
        jvmArgs "-XX:TieredStopAtLevel=1", "-Xverify:none"
    }

    ext["groovy.version"] = groovyVersion

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testCompile "org.assertj:assertj-core"
        testCompile "org.spockframework:spock-core:${spockVersion}"
        testCompile "org.mockito:mockito-core"
    }
}

project(":sample-common") {
    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }

    dependencies {
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        compile "org.springframework.boot:spring-boot-starter"

        compile "org.apache.commons:commons-lang3"
        compile "org.apache.commons:commons-text:1.4"
        compile "org.apache.commons:commons-compress:1.14"
        compile "commons-codec:commons-codec"
        compile "org.apache.commons:commons-digester3:3.2"
        compile "commons-io:commons-io:2.5"
        compile "org.apache.tika:tika-core:1.15"
        compile "dom4j:dom4j"
        compile "com.ibm.icu:icu4j:59.1"
    }

}

project(":sample-domain") {
    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }

    processResources.destinationDir = compileJava.destinationDir
    compileJava.dependsOn processResources

    dependencies {
        compile project(":sample-common")

        compile "org.springframework.boot:spring-boot-starter-aop"
        compile "org.springframework.boot:spring-boot-starter-validation"
        compile "org.springframework.boot:spring-boot-starter-mail"
        compile "org.springframework.boot:spring-boot-starter-thymeleaf"
        compile "org.springframework.boot:spring-boot-starter-jdbc"
        compile "org.springframework.boot:spring-boot-starter-json"

        annotationProcessor "org.seasar.doma.boot:doma-spring-boot-starter:1.1.1"
        compile("org.seasar.doma.boot:doma-spring-boot-starter:1.1.1") {
            exclude group: "org.springframework.boot"
        }

        compile "org.codehaus.groovy:groovy:${groovyVersion}"
        compile("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.3.0") {
            exclude group: "org.codehaus.groovy", module: "groovy"
        }

        compile "mysql:mysql-connector-java"
        compile "org.flywaydb:flyway-core"

        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.spockframework:spock-spring:${spockVersion}"
    }
}

project(":sample-web-base") {
    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }

    dependencies {
        compile project(":sample-domain")

        compile "org.springframework.boot:spring-boot-starter-cache"
        compile("org.springframework.boot:spring-boot-starter-web") {
            exclude module: "spring-boot-starter-tomcat"
        }
        compile "org.springframework.boot:spring-boot-starter-security"
        compile "org.springframework.boot:spring-boot-starter-jetty"

        compile "org.springframework.session:spring-session-jdbc"

        compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity5"

        compile "net.sf.jasperreports:jasperreports:6.4.0"
        compile "com.lowagie:itext:2.1.7.js5"

        compile "org.apache.poi:poi:3.16"
        compile "org.apache.poi:poi-ooxml:3.16"

        compile "net.sf.ehcache:ehcache"

        compile "org.webjars:webjars-locator-core"
        compile "org.webjars:bootstrap:3.3.7"
        compile "org.webjars:jquery:2.2.4"
        compile "org.webjars:jquery-validation:1.17.0"
        compile "org.webjars:bootstrap-datepicker:1.7.1"
        compile("org.webjars.bower:iCheck:1.0.2") {
            exclude module: "jquery"
        }
        compile "org.webjars:html5shiv:3.7.3"
        compile "org.webjars:respond:1.4.2"
        compile "org.webjars:AdminLTE:2.3.8"
        compile "org.webjars:font-awesome:4.7.0"
        compile "org.webjars:ionicons:2.0.1"

        testCompile "org.springframework.security:spring-security-test"
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.spockframework:spock-spring:${spockVersion}"
    }
}

project(":sample-web-admin") {
    bootJar {
        launchScript()
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
        compile project(":sample-web-base")
        developmentOnly "org.springframework.boot:spring-boot-devtools"

        testCompile "org.springframework.security:spring-security-test"
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.spockframework:spock-spring:${spockVersion}"
    }
}

project(":sample-web-front") {
    bootJar {
        launchScript()
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
        compile project(":sample-web-base")
        developmentOnly "org.springframework.boot:spring-boot-devtools"

        testCompile "org.springframework.security:spring-security-test"
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.spockframework:spock-spring:${spockVersion}"
    }
}

project(":sample-batch") {
    bootRun {
        if (project.hasProperty("args")) {
            args project.args.split("\\s+")
        }
    }

    dependencies {
        compile project(":sample-domain")

        compile "org.springframework.boot:spring-boot-starter-batch"

        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.springframework.batch:spring-batch-test"
        testCompile "org.spockframework:spock-spring:${spockVersion}"
    }
}